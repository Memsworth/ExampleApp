// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(CourseEnrolmentDbContext))]
    [Migration("20230205151621_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("DataLayer.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("DataLayer.CoursesTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TermId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TermId");

                    b.ToTable("CoursesTerm");
                });

            modelBuilder.Entity("DataLayer.Enrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoursesTermId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EnrolledOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CoursesTermId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrolment");
                });

            modelBuilder.Entity("DataLayer.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentGlobalId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DataLayer.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("DataLayer.CoursesTerm", b =>
                {
                    b.HasOne("DataLayer.Course", "Course")
                        .WithMany("CoursesTerms")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Term", "Term")
                        .WithMany("CoursesPerTerms")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("DataLayer.Enrolment", b =>
                {
                    b.HasOne("DataLayer.CoursesTerm", "CoursesTerm")
                        .WithMany("Enrolments")
                        .HasForeignKey("CoursesTermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Student", "Student")
                        .WithMany("Enrolments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoursesTerm");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataLayer.Course", b =>
                {
                    b.Navigation("CoursesTerms");
                });

            modelBuilder.Entity("DataLayer.CoursesTerm", b =>
                {
                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("DataLayer.Student", b =>
                {
                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("DataLayer.Term", b =>
                {
                    b.Navigation("CoursesPerTerms");
                });
#pragma warning restore 612, 618
        }
    }
}
